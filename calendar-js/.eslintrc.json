{
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:react-hooks/recommended",
      "plugin:import/typescript",
      "plugin:security/recommended",
      "plugin:react/jsx-runtime"
    ],
    "plugins": ["react", "@typescript-eslint", "react-hooks", "eslint-plugin-import", "security", "unused-imports"],
    "env": {
      "es6": true,
      "browser": true,
      "node": true,
      "jest": true,
      "jquery": true
    },
    "rules": {
      "eol-last": "error",
      "no-undef": "off",
      "no-unused-vars": "off",
      "unused-imports/no-unused-imports": "error",
          "unused-imports/no-unused-vars": [
              "warn",
              { "vars": "all", "varsIgnorePattern": "^_", "args": "none", "argsIgnorePattern": "^_", "ignoreRestSiblings": true }
          ],
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "error",
      "security/detect-object-injection": "off",
      "no-restricted-imports": "off",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": ["classMethod"],
          "modifiers": ["protected"],
          "format": null,
          "leadingUnderscore": "allow"
        },
        {
          "selector": "default",
          "format": ["camelCase"]
        },
        {
          "selector":"parameter",
          "format": ["camelCase", "PascalCase"],
          "leadingUnderscore": "allow"
        },
        {
          "selector":"classProperty",
          "format": null,
          "leadingUnderscore": "allow"
        },
        {
          "selector": "function",
          "format": ["camelCase", "PascalCase"]
        },
        {
          "selector": ["variable", "typeProperty"],
          "format": ["camelCase", "PascalCase", "UPPER_CASE"],
          "leadingUnderscore": "allow"
        },
        {
          "selector": "objectLiteralProperty",
          "format": ["camelCase", "PascalCase", "UPPER_CASE", "snake_case"]
        },
        {
          "selector": ["enum", "enumMember"],
          "format":["UPPER_CASE", "PascalCase", "camelCase"]
        },
        {
          "selector": "typeLike",
          "format": ["PascalCase"]
        },
  
        {
          "selector": [
            "classProperty",
            "objectLiteralProperty",
            "objectLiteralMethod",
            "typeMethod",
            "accessor",
            "enumMember",
            "typeProperty"
          ],
          "format": null,
          "modifiers": ["requiresQuotes"]
        }
      ],
      "@typescript-eslint/ban-types":[
        "error",
        {
          "types": {
            "String": {
              "message": "Use string instead",
              "fixWith": "string"
            },
            "Boolean": {
              "message": "Use boolean instead",
              "fixWith": "boolean"
            },
            "Number":{
              "message": "Use number instead",
              "fixWith": "number"
            },
            "Symbol": {
              "message": "Use symbol instead",
              "fixWith": "symbol"
            },
            "object": {
              "message": "Use Record instead",
              "fixWith": "Record<string | number | symbol, unknown>"
            }
          }
        }
      ],
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/no-empty-function": "off",
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/interface-name-prefix": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/member-delimiter-style": [
        "error",
        {
          "multiline": {
            "delimiter": "semi",
            "requireLast": true
          },
          "singleline": {
            "delimiter": "semi",
            "requireLast": false
          }
        }
      ],
      "@typescript-eslint/no-restricted-imports": ["warn", {
        "patterns": ["@material-ui*"],
        "message": "Please use @mui (v5) instead"
      }],
      "import/order": [
        "error",
        {
          "groups": ["builtin", "external", "index", ["internal", "sibling", "parent"]],
          "newlines-between": "always",
          "alphabetize": { "order": "asc", "caseInsensitive": true }
        }
      ],
      "react/jsx-uses-react": "error",
      "react/jsx-uses-vars": "error"
    },
    "settings": {
      "react": {
        "pragma": "React",
        "version": "detect"
      },
      "import/internal-regex": "^(components|utils|views|services|hooks|assets)"
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true
      }
    }
  }
  